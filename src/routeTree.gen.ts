/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as ReadingroomRouteImport } from './routes/readingroom'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LogarticleRouteImport } from './routes/logarticle'
import { Route as BlogsRouteImport } from './routes/blogs'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const ReadingroomRoute = ReadingroomRouteImport.update({
  id: '/readingroom',
  path: '/readingroom',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LogarticleRoute = LogarticleRouteImport.update({
  id: '/logarticle',
  path: '/logarticle',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsRoute = BlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/blogs': typeof BlogsRoute
  '/logarticle': typeof LogarticleRoute
  '/login': typeof LoginRoute
  '/readingroom': typeof ReadingroomRoute
  '/signup': typeof SignupRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blogs': typeof BlogsRoute
  '/logarticle': typeof LogarticleRoute
  '/login': typeof LoginRoute
  '/readingroom': typeof ReadingroomRoute
  '/signup': typeof SignupRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/blogs': typeof BlogsRoute
  '/logarticle': typeof LogarticleRoute
  '/login': typeof LoginRoute
  '/readingroom': typeof ReadingroomRoute
  '/signup': typeof SignupRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/blogs'
    | '/logarticle'
    | '/login'
    | '/readingroom'
    | '/signup'
    | '/api/auth/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/blogs'
    | '/logarticle'
    | '/login'
    | '/readingroom'
    | '/signup'
    | '/api/auth/$'
  id:
    | '__root__'
    | '/'
    | '/blogs'
    | '/logarticle'
    | '/login'
    | '/readingroom'
    | '/signup'
    | '/api/auth/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BlogsRoute: typeof BlogsRoute
  LogarticleRoute: typeof LogarticleRoute
  LoginRoute: typeof LoginRoute
  ReadingroomRoute: typeof ReadingroomRoute
  SignupRoute: typeof SignupRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/readingroom': {
      id: '/readingroom'
      path: '/readingroom'
      fullPath: '/readingroom'
      preLoaderRoute: typeof ReadingroomRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logarticle': {
      id: '/logarticle'
      path: '/logarticle'
      fullPath: '/logarticle'
      preLoaderRoute: typeof LogarticleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BlogsRoute: BlogsRoute,
  LogarticleRoute: LogarticleRoute,
  LoginRoute: LoginRoute,
  ReadingroomRoute: ReadingroomRoute,
  SignupRoute: SignupRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
