/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'

const ACTION_MAP = {
  attack: 'AnimalArmature|Attack',
  death: 'AnimalArmature|Death',
  eating: 'AnimalArmature|Eating',
  gallop: 'AnimalArmature|Gallop',
  gallopJump: 'AnimalArmature|Gallop_Jump',
  idle: 'AnimalArmature|Idle',
  idle2: 'AnimalArmature|Idle_2',
  idleHeadlow: 'AnimalArmature|Idle_2_HeadLow',
  idleHitLeft: 'AnimalArmature|Idle_HitReact_Left',
  idleHitReactRight: 'AnimalArmature|Idle_HitReact_Right',
  jumpIdle: 'AnimalArmature|Jump_ToIdle',
  walk: 'AnimalArmature|Walk',
}

export default function Husky(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('models/Husky.glb')
  const { actions } = useAnimations(animations, group)

  const idleAnimations = [
    ACTION_MAP.idle,
    ACTION_MAP.idle2,
    ACTION_MAP.idleHeadlow,
  ]
  console.log('Idle animations: ', idleAnimations)

  console.log('Husky actions: ', actions)

  useEffect(() => {
    if (!actions) return

    const initialAction = actions[ACTION_MAP.idle]
    if (initialAction) {
      initialAction.reset().fadeIn(0.5).play()
    }

    // Clean up
    return () => {
      if (initialAction) {
        initialAction.stop()
      }
    }
  }, [actions])

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="AnimalArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Body} />
            <primitive object={nodes.IKBackLegL} />
            <primitive object={nodes.IKFrontLegL} />
            <primitive object={nodes.IKBackLegR} />
            <primitive object={nodes.IKFrontLegR} />
          </group>
          <group
            name="Cube"
            position={[0, 0, 0.062]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <skinnedMesh
              name="Cube_1"
              geometry={nodes.Cube_1.geometry}
              material={materials.Material}
              skeleton={nodes.Cube_1.skeleton}
            />
            <skinnedMesh
              name="Cube_2"
              geometry={nodes.Cube_2.geometry}
              material={materials['Material.001']}
              skeleton={nodes.Cube_2.skeleton}
            />
            <skinnedMesh
              name="Cube_3"
              geometry={nodes.Cube_3.geometry}
              material={materials['Material.006']}
              skeleton={nodes.Cube_3.skeleton}
            />
            <skinnedMesh
              name="Cube_4"
              geometry={nodes.Cube_4.geometry}
              material={materials['Material.003']}
              skeleton={nodes.Cube_4.skeleton}
            />
            <skinnedMesh
              name="Cube_5"
              geometry={nodes.Cube_5.geometry}
              material={materials['Material.002']}
              skeleton={nodes.Cube_5.skeleton}
            />
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('models/Husky.glb')
